# .tmux.conf
################################################################################
# Chris Clonch <chris at theclonchs dot com>
# Based heavily on Ton Kersten's (http://tonkersten.com/2011/07/104-switching-to-tmux/)
################################################################################

# Couple of notes:
#   * A single config file for multiple versions of tmux is tricky.  So long as
#     tmux uses floats (no semantic version numbers), we can use bc to perform
#     a full range of comparisons vs the string comparisons floating around the
#     net.  Looks ugly but it works.


################################################################################
# Base Options

# Set escape time to 0.
set-option -sg  escape-time 0

# Disable UTF8 mouse mode, which causes extra characters to be inserted when
# using tmux in a ssh session and XFCE Terminal...
# http://superuser.com/questions/417027/why-are-random-letters-inserted-in-my-tmux-session
set-option -g mouse-utf8 off

set-option -ga  update-environment 'DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY'

# Set the prefix to Ctrl-a
set-option -g   prefix C-a
bind-key C-a    send-prefix

# Disable some default bindings
unbind-key %   # split-window -h

# All kind of nice options
set-option -g   bell-action any
set-option -g   default-terminal screen-256color  # Adjust term to use 256 colors.
set-option -g   history-limit 100000  # Use a BIG scrollback history buffer.
#set-option -g   mouse-select-pane on  # deprecated 2.1
#set-option -g   mouse-select-window on  # deprecated 2.1
#set-option -g   mouse-resize-pane on  # deprecated 2.1
set-option -g   mouse on  # Enable mouse mode, 2.1
set-option -g   repeat-time 500  # Allow multiple commands without pressing prefix-key.
set-option -g   display-panes-time 6000  # Milliseconds display-pane numbers are shown.
set-option -g   display-time 3000  # Milliseconds status line & other messages are shown.
set-option -g   visual-activity off
set-option -g   visual-bell on
# Renumber the window numbers
#if-shell '[[ $(bc <<< "$(tmux -V| cut -d" " -f3) >= 1.7") ]]' 'set-option -g renumber-windows on'  
set-option -g renumber-windows on

#set-window-option -g    c0-change-trigger 10         # set flow control trigger to 10 control chars / 1 ms # deprecated 2.1
#set-window-option -g    c0-change-interval 100       # set flow control limiter to 100 ms  #deprecated 2.1

set-option -g   set-titles on
set-option -g   set-titles-string ' #I-#W '
set-option -g   terminal-overrides 'xterm*:smcup@:rmcup@'  # Fix issue with Shift-Page{Up|Down}
set-option -g   base-index 1
set-option -g   pane-base-index 1

# Screen lock
#bind-key C-x    lock-server
#bind-key x      lock-server
#bind-key -n M-x lock-server
#set-option -g   lock-after-time 0
#set-option -g   lock-server on
#set-option -g   lock-command "vlock"

# statusbar
set-option -g   status-utf8 on
set-option -g   status-interval 1
set-option -g   status-justify left
set-option -g   status-left-length 15
set-option -g   status-left ' #h |'
set-option -g   status-right ' | %Y-%m-%d %H:%M #[default]'


################################################################################
# COLORS 

# default statusbar colors
set-option -g   status-fg "#586e75"  # base01
set-option -g   status-bg "#002b36"  # base03
#set-option -g   status-attr bright
set-option -g   status-keys emacs

# default window title colors
set-window-option -g window-status-fg "#839496"  # base0
set-window-option -g window-status-bg "#002b36"  # base03
#set-window-option -g window-status-attr dim

# active window title colors
#set-window-option -g window-status-current-fg "#268bd2"  # blue
set-window-option -g window-status-current-fg "#b58900"  # yellow
set-window-option -g window-status-current-bg "#073642"  # base02
#set-window-option -g window-status-current-attr bright
#
#set-window-option -g mode-fg "#268bd2"  # blue
set-window-option -g mode-fg "#b58900"  # yellow
set-window-option -g mode-bg "#073642" # base02
set-window-option -g mode-attr bright

# pane colors
set-option -g   pane-border-bg default
#set-option -g   pane-border-fg "#073642" # base02
set-option -g   pane-border-fg "#586e75"  # base01
set-option -g   pane-active-border-bg default
#set-option -g   pane-active-border-fg "#dc322f"  # red
set-option -g   pane-active-border-fg "#b58900"  # yellow

# misc items (popups, etc)
set-option -g   message-bg "#073642"  # base02
set-option -g   message-fg "#d33682"  # magenta
set-option -g   display-panes-colour "#b58900"  # yellow

# Window options
set-window-option -g utf8 on
set-window-option -g clock-mode-colour "#268bd2"  # blue
set-window-option -g clock-mode-style 24
set-window-option -g monitor-activity on
set-window-option -g xterm-keys on
set-window-option -g automatic-rename on
set-window-option -g aggressive-resize on    # constrain window size to the smallest client currently viewing it vs currently attached session.
#
set-window-option -g window-status-format ' #I-#W '
set-window-option -g window-status-current-format ' #I-#W '

################################################################################
# KEY BINDINGS

# Remap keys to my settings
unbind-key M-d      ; bind-key -n M-d   detach-client
unbind-key d        ; bind-key d        detach-client

unbind-key M-c      ; bind-key -n M-c   command-prompt -p "tmux:"
unbind-key M-m      ; bind-key -n M-m   command-prompt -p "Man:" "split-window 'man %%'"
unbind-key M-e      ; bind-key -n M-e   choose-session

# Window selection
unbind-key Tab      ; bind-key Tab      choose-window
unbind-key M-w      ; bind-key -n M-w   choose-window
#if-shell '[[ $(bc <<< "$(tmux -V| cut -d' ' -f2) >= 1.9") ]]' \
#	'unbind-key c ; bind-key c new-window -c "#{pane_current_path}"'
unbind-key M-`      ; bind-key -n M-`   last-window
unbind-key n        ; bind-key n        next-window
unbind-key p        ; bind-key p        previous-window
unbind-key M-n      ; bind-key -n M-n   next-window
unbind-key M-p      ; bind-key -n M-p   previous-window
unbind-key 1        ; bind-key 1        select-window -t 1
unbind-key 2        ; bind-key 2        select-window -t 2
unbind-key 3        ; bind-key 3        select-window -t 3
unbind-key 4        ; bind-key 4        select-window -t 4
unbind-key 5        ; bind-key 5        select-window -t 5
unbind-key 6        ; bind-key 6        select-window -t 6
unbind-key 7        ; bind-key 7        select-window -t 7
unbind-key 8        ; bind-key 8        select-window -t 8
unbind-key 9        ; bind-key 9        select-window -t 9
unbind-key 0        ; bind-key 0        select-window -t 10
unbind-key M-1      ; bind-key -n M-1   select-window -t 1
unbind-key M-2      ; bind-key -n M-2   select-window -t 2
unbind-key M-3      ; bind-key -n M-3   select-window -t 3
unbind-key M-4      ; bind-key -n M-4   select-window -t 4
unbind-key M-5      ; bind-key -n M-5   select-window -t 5
unbind-key M-6      ; bind-key -n M-6   select-window -t 6
unbind-key M-7      ; bind-key -n M-7   select-window -t 7
unbind-key M-8      ; bind-key -n M-8   select-window -t 8
unbind-key M-9      ; bind-key -n M-9   select-window -t 9
unbind-key M-0      ; bind-key -n M-0   select-window -t 10
unbind-key N        ; bind-key N        swap-window -t +1
unbind-key P        ; bind-key P        swap-window -t -1

# Window splitting
unbind-key | ; bind-key | split-window -h -c "#{pane_current_path}"
unbind-key - ; bind-key - split-window -v -c "#{pane_current_path}"
# FIX: #{pane_current_path} isn't getting eval'd
#if-shell '[[ $(bc <<< "$(tmux -V| cut -d' ' -f2) >= 1.9") ]]' \
#	'unbind-key | ; bind-key | split-window -h -c "#{pane_current_path}"'
#if-shell '[[ $(bc <<< "$(tmux -V| cut -d' ' -f2) < 1.9") ]]' \
#	'unbind-key | ; bind-key | split-window -h'
#if-shell '[[ $(bc <<< "$(tmux -V| cut -d' ' -f2) >= 1.9") ]]' \
#	'unbind-key - ; bind-key - split-window -v -c "#{pane_current_path}"'
#if-shell '[[ $(bc <<< "$(tmux -V| cut -d' ' -f2) >= 1.9") ]]' \
#	'unbind-key - ; bind-key - split-window -v'

# Pane selection and resizing
unbind-key C-p        ; bind-key C-p            display-panes
unbind-key left       ; bind-key left           select-pane -L
unbind-key up         ; bind-key up             select-pane -U
unbind-key down       ; bind-key down           select-pane -D
unbind-key right      ; bind-key right          select-pane -R
unbind-key C-h        ; bind-key C-h            select-pane -L
unbind-key C-k        ; bind-key C-k            select-pane -U
unbind-key C-j        ; bind-key C-j            select-pane -D
unbind-key C-l        ; bind-key C-l            select-pane -R
unbind-key j          ; bind-key -r j           resize-pane -D 5
unbind-key k          ; bind-key -r k           resize-pane -U 5
unbind-key h          ; bind-key -r h           resize-pane -L 5
unbind-key l          ; bind-key -r l           resize-pane -R 5
unbind-key C-left     ; bind-key -r C-left      resize-pane -L 1
unbind-key C-right    ; bind-key -r C-right     resize-pane -R 1
unbind-key C-up       ; bind-key -r C-up        resize-pane -U 1
unbind-key C-down     ; bind-key -r C-down      resize-pane -D 1
unbind-key C-S-left   ; bind-key -r C-S-left    resize-pane -L 5
unbind-key C-S-right  ; bind-key -r C-S-right   resize-pane -R 5
unbind-key C-S-up     ; bind-key -r C-S-up      resize-pane -U 5
unbind-key C-S-down   ; bind-key -r C-S-down    resize-pane -D 5
unbind-key M-left     ; bind-key -n M-left      select-pane -L
unbind-key M-right    ; bind-key -n M-right     select-pane -R
unbind-key C-up       ; bind-key -r M-up        select-pane -U
unbind-key C-down     ; bind-key -r M-down      select-pane -D
unbind-key +          ; bind-key +              select-layout tiled
unbind-key =          ; bind-key =              select-layout even-vertical \; select-layout even-horizontal
unbind-key I          ; bind-key I              select-layout even-horizontal
unbind-key L          ; bind-key L              select-layout even-vertical

unbind-key @        ; bind-key @        confirm-before kill-window
# ? = list keys bindings
unbind-key ?        ; bind-key ?        list-keys
# R = reload configuration file
unbind-key R        ; bind-key R	       source-file ~/.tmux.conf \; display-message "Configuration reloaded."
# R = reload configuration file
unbind-key M-p      ; bind-key M-p      source-file ~/.tmux/layout-prog.tmux
# * = duplicate input to all panes in current window
unbind-key *        ; bind-key *        set-window-option synchronize-panes
unbind-key /        ; bind-key /        command-prompt -p 'alert on string (str):' "setw monitor-content '%%'"
unbind-key "'"      ; bind-key "'"      command-prompt -p 'alert on silence (secs):' "set-window-option monitor-silence '%%'"
unbind-key '"'      ; bind-key '"'      set-window-option monitor-activity


# Copy mode
set-window-option -g mode-keys vi
#set-window-option -g mode-mouse off  # deprecated 2.1
#set-window-option -g mode-mouse on
set-option buffer-limit 10
unbind-key -n M-NPage       ; bind-key -n M-NPage       copy-mode
unbind-key -n M-PPage       ; bind-key -n M-PPage       copy-mode
unbind-key Escape           ; bind-key Escape           copy-mode
unbind-key M-i              ; bind-key -n M-i           paste-buffer
unbind-key -t vi-copy v     ; bind-key -t vi-copy v     begin-selection
unbind-key -t vi-copy y     ; bind-key -t vi-copy y     copy-selection
#if-shell '[[ $(bc <<< "$(tmux -V| cut -d' ' -f2) >= 1.8") ]]' \
#	'unbind-key -t vi-copy y ; bind-key -t vi-copy y copy-pipe "xsel --input --primary --clipboard"'
unbind-key C-y    ; bind C-y     run "tmux show-buffer | xsel --input --primary --clipboard" \; display-message "Copied tmux buffer to system clipboard"
unbind-key C-c    ; bind C-c     run "tmux show-buffer | xsel --input --primary --clipboard" \; display-message "Copied tmux buffer to system clipboard"
	
unbind-key -t vi-copy Home  ; bind-key -t vi-copy Home  start-of-line
unbind-key -t vi-copy End   ; bind-key -t vi-copy End   end-of-line
unbind-key -t vi-copy b     ; bind-key -t vi-copy b     rectangle-toggle

#if-shell "[[ $(tmux -V) >= *1.8* ]]" \
#   'unbind-key -t vi-copy y ; bind-key -t vi-copy y copy-pipe "xclip -selection clipboard -in" \; display-message "Copied tmux buffer to system clipboard"'

# Depends on xclip (typically seperate package).
# Move x clipboard into tmux paste buffer.
#unbind-key C-v    ; bind C-v     run "xclip -out | tmux load-buffer -; tmux paste-buffer"
# Move tmux copy buffer into x clipboard.
#unbind-key C-y    ; bind C-y     run "tmux show-buffer | xclip -selection clipboard -in" \; display-message "Copied tmux buffer to system clipboard"
#unbind-key C-c    ; bind C-c     run "tmux show-buffer | xclip -selection clipboard -in" \; display-message "Copied tmux buffer to system clipboard"

# Misc bits
unbind-key C         ; bind-key C       clock-mode

#### Plugins
set -g @plugin 'tmux-plugins/tpm'
# Tmux Resurrect
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-processes 'ssh'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
